;  FMP.dbc: FMP map handling functions
;
;  Copyright (C) 2015 Ulrich Hecht
;
;  This software is provided 'as-is', without any express or implied
;  warranty.  In no event will the authors be held liable for any damages
;  arising from the use of this software.
;
;  Permission is granted to anyone to use this software for any purpose,
;  including commercial applications, and to alter it and redistribute it
;  freely, subject to the following restrictions:
;
;  1. The origin of this software must not be misrepresented; you must not
;     claim that you wrote the original software. If you use this software
;     in a product, an acknowledgment in the product documentation would be
;     appreciated but is not required.
;  2. Altered source versions must be plainly marked as such, and must not be
;     misrepresented as being the original software.
;  3. This notice may not be removed or altered from any source distribution.
;
;  Ulrich Hecht
;  ulrich.hecht@gmail.com

SUB FMPMAPTILES16x16(map_ptr, map_width, screen_block, start_x, start_y, width, height)
	LOCAL xx, yy		; SCx start coordinates for 16x16 tile
	LOCAL x, y		; 16x16 FMP tile coordinates
	LOCAL dest_x, dest_y	; 8x8 screen tile coordinates
	LOCAL block		; screen block (SCx)
	LOCAL line_block	; first screen block (SCx) of current line
	LOCAL cell		; tile index
	LOCAL line_ptr		; first tile index of current line

	width = width - 1	; thanks, BASIC :(
	height = height - 1

	FOR y = 0 TO height
		dest_y = y * 2 + start_y
		yy = dest_y and 31
		line_ptr = map_ptr + y * map_width
		line_block = screen_block + (dest_y / 32) * 2
		FOR x = 0 TO width
			dest_x = x * 2 + start_x
			block = line_block + dest_x / 32
			xx = dest_x and 31
			cell = peekb(line_ptr + x) * 4
			settile tile(block, xx, yy), cell
			settile tile(block, xx+1, yy), cell+1
			settile tile(block, xx, yy+1), cell+2
			settile tile(block, xx+1, yy+1), cell+3
		NEXT
	NEXT
END SUB

SUB FMPMAPTILES8x8(map_ptr, map_width, screen_block, start_x, start_y, width, height)
	LOCAL xx, yy		; SCx start coordinates for 16x16 tile
	LOCAL x, y		; 16x16 FMP tile coordinates
	LOCAL dest_x, dest_y	; 8x8 screen tile coordinates
	LOCAL block		; screen block (SCx)
	LOCAL line_block	; first screen block (SCx) of current line
	LOCAL line_ptr		; first tile index of current line

	width = width - 1	; thanks, BASIC :(
	height = height - 1

	FOR y = 0 TO height
		dest_y = y + start_y
		yy = dest_y and 31
		line_ptr = map_ptr + y * map_width
		line_block = screen_block + (dest_y / 32) * 2
		FOR x = 0 TO width
			dest_x = x + start_x
			block = line_block + dest_x / 32
			xx = dest_x and 31
			settile tile(block, xx, yy), peekb(line_ptr + x)
		NEXT
	NEXT
END SUB

FUNCTION FMPWIDTH(fmp)
	RETURN peekb(fmp + 14)
END FUNCTION

FUNCTION FMPHEIGHT(fmp)
	RETURN peekb(fmp + 15)
END FUNCTION

FUNCTION FMPLAYERS(fmp)
	RETURN peek(fmp + 18)
END FUNCTION

FUNCTION FMPTILES(fmp)
	RETURN peek(fmp + 16)
END FUNCTION

SUB FMPMAPTILES(fmp, layer, screen_block, start_x, start_y, width, height)
	LOCAL map_ptr

	; find address of map data
	map_ptr = peekw(fmp + 8)	; first layer
	WHILE layer > 0
		map_ptr = peekw(map_ptr) ; next layer
		dec layer
	LOOP

	; choose mapping routine based on tile size
	IF peekb(fmp + 12) = 16
		fmpmaptiles16x16 map_ptr + 4, fmpwidth(fmp), screen_block, start_x, start_y, width, height
	ELSE
		fmpmaptiles8x8 map_ptr + 4, fmpwidth(fmp), screen_block, start_x, start_y, width, height
	END IF
END SUB
